**TODO list**

from the simple case to the complicated case

level 1 (ok)

when there is no complicated mechanism

just put and get, and you may want it running for a long time, when the memory space is not enough what should you do

how to put the disk into the management (when there is empty slot in the memory, put it into the memory otherwise, put it into disk)

level 2

object can be differnet format, the image data or other vtk data format, there needs a mapping from the physical bbx into the bbx of data presentation such as bbx of the matrix, bbx should be the double in this case
(challenges, the size of the data might change, we can not make sure the space that need to be allocated for the previous way, high frequent space registration may bad for performance)

the bbx of the matrix or the tensor should be one specific type of the data, namely the bounding box for the image data

the physical domain is comparatively fixed but the resolution can be changed

therefor it is convenient to use the physical domain (or the domain of the original cartitisan) as the index and then map it to the data bbx when it is necessary

maybe also update the clients part and split it into the innner and the the user client

level 3

set the garbage collection mechanism delete the data object when it is necessary
the naive strategy is to set a sliding window

level 4

then add the ability of processing in memory

level 5

then the ability to support multiple data representation

A in-line extraction and in-trnasit reduced data

B in-transit extraction and in-trnasit reduced data and further analysis

let the uid generated by client, since when put data, it needs the blockid in block summary now

level 6 
more complicated scheduling mechanism