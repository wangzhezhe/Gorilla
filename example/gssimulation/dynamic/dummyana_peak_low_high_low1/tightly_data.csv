Al,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
At,0.0673313,0.0674148,0.0673547,0.067528,0.0666635,0.0675094,0.0675762,0.0676584,0.0680718,0.0675163,0.0675325,0.067718,0.0666406,0.068114,0.0675743,0.067692,0.282038,0.488019,0.637384,0.756961,0.85691,0.932535,0.998474,1.05249,1.09637,1.70712,1.71325,1.7088,1.71109,1.70439,1.7117,1.7086,1.70994,1.70961,1.71124,1.71244,1.09904,1.05321,0.995782,0.929527,0.856302,0.756233,0.639664,0.486413,0.285505,0.0681822,0.0679638,0.0682645,0.068121,0.0684581,0.0677147,0.0682678,0.0682781,0.0681989,0.0684035,0.0676436,0.0677872,0.0684769,0.0685852,0.0683837
S,0.962566,0.969543,0.974809,0.98875,0.972733,0.987595,0.973013,0.973262,0.983252,0.97365,0.981747,0.975859,0.974995,0.978856,0.973752,0.975149,0.975895,0.974463,1.02106,0.974786,0.974517,0.977434,0.974292,0.975353,0.975154,0.974782,0.975284,0.975535,0.976022,0.976264,0.97651,0.975606,0.975344,0.975924,0.976324,0.97595,0.97649,0.977192,0.976911,0.976622,0.975504,0.976204,0.975981,0.976887,0.97733,0.975953,0.975953,0.971279,0.97016,0.969807,0.970112,0.969726,0.97007,0.969614,0.971776,0.969529,0.973823,0.969337,0.969148,0.969249
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

0: sim executiontime 93.5484 accumulatedSim 58.2807

 0: sim executiontime 93.4223 accumulatedSim 58.2034

 0: sim executiontime 93.7638 accumulatedSim 58.5307

 avg 93.46433333
 stdev 0.07280386894

  int workLoad = 60;
  int workLoadhigh = 1500;

  // 0-bound1 steady
  int bound1 = (totalStep / 6) + 5;
  // bound1-bound2 increase
  int bound2 = (2 * totalStep / 6) + 5;
  // bound2-bound3 steady
  int bound3 = (3 * totalStep / 6) + 5;
  // bound2-bound4 decrease
  int bound4 = (4 * totalStep / 6) + 5;
  // bound4-last steady

  // 0.2 is a good value to make sure it increase gradually
  // try this later
  double rate = 0.2;

  if (step < (bound1))
  {
    // first part
  }
  else if (step > bound1 && step < bound2)
  {
    workLoad = workLoadhigh - workLoadhigh * (1.0 / (1.0 + rate * (step - bound1)));
  }
  else if (step >= bound2 && step <= bound3)
  {
    workLoad = workLoadhigh;
  }
  else if (step > bound3 && step < bound4)
  {
    workLoad = workLoadhigh - workLoadhigh * (1.0 / (1.0 + rate * (bound4 - step)));
  }
  else
  {
    // last part is low
    workLoad = 60;
  }

  sim size 626, each iteration +600ms

  {
    "L": 646,
    "Du": 1.2,
    "Dv": 0.8,
    "F": 0.02,
    "k": 0.048,
    "dt": 1.0,
    "plotgap": 1,
    "steps": 60,
    "noise": 0.01,
    "output": "gs.bp",
    "checkpoint": false,
    "checkpoint_freq": 10,
    "checkpoint_output": "gs_ckpt.bp",
    "adios_config": "adios2.xml",
    "adios_span": false,
    "adios_memory_selection": false,
    "mesh_type": "image"
}