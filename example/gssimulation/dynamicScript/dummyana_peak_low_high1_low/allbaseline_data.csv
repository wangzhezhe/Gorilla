Al,0,0.042359,0.0431824,0.039399,0.0405062,0.0416075,0.042195,0.0422181,0.0429991,0.0413405,0.0402134,0.0434458,0.0433008,0.0429889,0.0407442,0.0432705,0.0409643,0.0423316,0.0427458,0.0434381,0.0434431,0.505808,0.701522,0.898503,1.06646,1.09729,1.12584,1.15458,1.15061,1.30769,1.3123,1.30597,1.15306,1.14898,1.12739,1.08921,1.0607,0.899683,0.699884,0.501432,0.0406622,0.040262,0.04079,0.0402165,0.0418277,0.0421904,0.0407622,0.0421262,0.0409945,0.0411224,0.0415541,0.0402468,0.0417711,0.0396523,0.0428977,0.0394357,0.0410807,0.0396848,0.0408443,0.0389068
At,0.042217,0.0421031,0.0422072,0.0421371,0.0429761,0.04217,0.0421965,0.0423024,0.0421951,0.0421295,0.0429983,0.0421445,0.0421679,0.0430019,0.0421872,0.0421841,0.0421739,0.0421698,0.0421867,0.0422423,0.494098,0.68247,0.871812,1.0339,1.06329,1.09185,1.11929,1.1209,1.27735,1.27433,1.27648,1.11808,1.11973,1.09127,1.06694,1.03687,0.873042,0.683743,0.492642,0.0422688,0.0422194,0.0422282,0.0430214,0.0422027,0.0422347,0.0422461,0.0421524,0.0422101,0.0421524,0.0424175,0.0422158,0.0422523,0.0422556,0.0423253,0.0422564,0.0422597,0.0422187,0.0421398,0.0429871,0.0424073
S,1.78218,1.78797,1.78123,1.78254,1.78661,1.78782,1.78029,1.78496,1.78671,1.79885,1.78781,1.78704,1.78447,1.78928,1.78842,1.78934,1.78483,1.78913,1.78827,1.79065,1.7968,1.78767,1.78808,1.78738,1.78881,1.80565,1.78837,1.78934,1.79046,1.78762,1.79039,1.78709,1.78845,1.78992,1.7825,1.7778,1.77832,1.77738,1.77837,1.7789,1.77735,1.77785,1.7825,1.77616,1.77793,1.77903,1.77709,1.77727,1.77702,1.77721,1.77716,1.77733,1.81956,1.77827,1.77709,1.77826,1.77823,1.78492,1.77748,1.77666
T,0.276895,0.36798,0.426602,0.437344,0.328979,0.415291,0.349802,0.363012,0.410792,0.426908,0.376805,0.378156,0.335201,0.440027,0.400064,0.410121,0.368184,0.367748,0.360052,0.359096,0.410355,0.382489,0.369502,0.370727,0.356114,0.393149,0.359595,0.341338,0.301987,0.421748,0.40738,0.410398,0.320795,0.374114,0.333106,0.365685,0.395304,0.361836,0.431561,0.399125,0.416809,0.331188,0.428571,0.231415,0.423445,0.353081,0.38697,0.315532,0.241957,0.411843,0.257054,0.170047,0.239945,0.269443,0.270358,0.343535,0.237952,0.257179,0.390152,0.412918
W,0,2.6494e-05,2.9329e-05,2.0949e-05,1.7746e-05,1.7604e-05,2.2754e-05,2.0653e-05,1.9143e-05,2.8534e-05,2.1774e-05,3.9521e-05,1.9599e-05,2.0103e-05,1.7005e-05,1.5117e-05,2.3136e-05,2.3077e-05,2.3652e-05,2.3139e-05,1.9991e-05,1.8981e-05,2.5802e-05,2.0744e-05,2.3365e-05,2.1602e-05,1.5494e-05,1.4644e-05,1.8209e-05,2.0107e-05,1.8457e-05,3.1575e-05,1.6887e-05,2.244e-05,2.094e-05,2.5561e-05,2.2722e-05,2.4263e-05,2.4942e-05,2.3524e-05,1.9916e-05,1.9546e-05,2.151e-05,1.8402e-05,2.3247e-05,1.6868e-05,1.6788e-05,1.7676e-05,2.5151e-05,2.337e-05,1.742e-05,1.6631e-05,2.201e-05,1.9274e-05,2.3056e-05,2.1477e-05,1.8358e-05,1.7231e-05,1.567e-05,1.4291e-05


sim executiontime 153.691
main time tick: 153.755

currently, the faltten area is 20-40, try smaller one such as 25-35, then the wider one such as 15-45, and three case is enough to show the results

{
    "L": 628,
    "Du": 1.2,
    "Dv": 0.8,
    "F": 0.02,
    "k": 0.048,
    "dt": 1.0,
    "plotgap": 1,
    "steps": 60,
    "noise": 0.01,
    "output": "gs.bp",
    "checkpoint": false,
    "checkpoint_freq": 10,
    "checkpoint_output": "gs_ckpt.bp",
    "adios_config": "adios2.xml",
    "adios_span": false,
    "adios_memory_selection": false,
    "mesh_type": "image"
}

maybe increase the time to put the data

the fat region is comparaitively high

for the simulation computation time
>>> 1.76976*60
106.1856

  int executeIteration = 1;
  int workLoad = 80;
  // steady
  int bound1 = (totalStep / 3);
  // increase
  int bound2 = (3 * totalStep / 6);
  // steady
  int bound3 = (3 * totalStep / 6);
  // decrease
  int bound4 = (4 * totalStep / 6);
  
  double rate = 1.0;

  if (step < (bound1)) {
    // first part
    executeIteration = 1;
  }
  else if (step >= bound1 && step < bound2) {
    workLoad = 120 - 40 * (1.0 / (1.0 + rate * (step - bound1)));
    executeIteration = 1 + 10 - 10 * (1.0 / (1.0 + rate * (step - bound1)));
  }
  else if (step >= bound2 && step <= bound3) {
    workLoad = 120;
    executeIteration = 11;
  }
  else if (step > bound3 && step <= bound4) {
    workLoad = 120 - 40 * (1.0 / (1.0 + rate*(bound4 - step)));
    executeIteration = 1 + 10 - 10 * (1.0 / (1.0 + rate * (bound4 - step)));
  }
  else {
    // last part is low
    workLoad = 80;
    executeIteration = 1;
  }