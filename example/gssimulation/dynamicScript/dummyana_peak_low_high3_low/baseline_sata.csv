Al,0,0.0402676,0.0420381,0.0429942,0.0419343,0.0402127,0.0430075,0.0429408,0.0415888,0.0430196,0.0394761,0.0403147,0.0415216,0.0408451,0.0434911,0.0429955,0.500156,0.700737,0.897127,1.06098,1.09259,1.12421,1.14564,1.14701,1.31757,1.59407,1.59593,1.5968,1.59758,1.60421,1.59812,1.60691,1.60827,1.59449,1.59536,1.59826,1.3188,1.14696,1.15915,1.13159,1.08846,1.07272,0.894601,0.700717,0.507213,0.0414702,0.0393782,0.0426645,0.042992,0.0425428,0.0417643,0.0404952,0.0421389,0.0424641,0.0429217,0.0402075,0.0426717,0.0405978,0.0403622,0.0430859
At,0.043014,0.0421164,0.0422466,0.0420878,0.0422108,0.0421317,0.0429623,0.0421231,0.042064,0.0421925,0.0429547,0.0423257,0.0429578,0.0421057,0.04217,0.49314,0.681705,0.87048,1.03285,1.06249,1.0899,1.12247,1.11851,1.27583,1.55348,1.55299,1.55248,1.55469,1.55262,1.55279,1.55515,1.55384,1.55243,1.55326,1.57201,1.27626,1.11724,1.11997,1.09078,1.06375,1.03585,0.871958,0.682801,0.491536,0.0421133,0.0421994,0.0421629,0.04212,0.0422375,0.0424213,0.0429752,0.0421889,0.0421538,0.0421917,0.0421767,0.0421906,0.0421081,0.0421972,0.0421417,0.0421741
S,1.77266,1.78308,1.77555,1.77914,1.7763,1.77945,1.7797,1.77844,1.78096,1.77961,1.77837,1.77617,1.78084,1.78048,1.78026,1.77789,1.77894,1.77913,1.7783,1.78114,1.79524,1.78147,1.78107,1.78291,1.79888,1.78199,1.78117,1.79576,1.78133,1.78044,1.78304,1.77831,1.78149,1.77994,1.77916,1.77696,1.77802,1.77486,1.78055,1.77999,1.77634,1.79438,1.78309,1.77522,1.77586,1.77543,1.77553,1.77735,1.77572,1.77598,1.77661,1.77542,1.77581,1.78108,1.7752,1.77556,1.77511,1.77471,1.7746,1.7763
T,0.359746,0.388759,0.372609,0.351911,0.401332,0.21809,0.367346,0.419639,0.255033,0.411689,0.381949,0.409913,0.371087,0.367472,0.347053,0.233262,0.255765,0.25261,0.191845,0.268944,0.391496,0.401248,0.285374,0.287758,0.208319,0.23882,0.303395,0.252905,0.282687,0.371423,0.303514,0.304223,0.383219,0.240003,0.445588,0.254499,0.241273,0.274238,0.348343,0.272472,0.258767,0.219682,0.330984,0.366063,0.272417,0.195147,0.234306,0.218097,0.214699,0.367427,0.39365,0.255417,0.272703,0.398794,0.244663,0.391045,0.402848,0.41361,0.224752,0.406467
W,0,1.7563e-05,4.4137e-05,2.327e-05,1.8024e-05,2.1728e-05,2.8783e-05,2.0581e-05,1.4498e-05,1.8268e-05,2.1063e-05,2.1272e-05,1.8267e-05,1.8639e-05,3.983e-05,1.9811e-05,1.7617e-05,2.3913e-05,2.4436e-05,1.7933e-05,1.9614e-05,3.8719e-05,2.0903e-05,2.7645e-05,2.3495e-05,2.0831e-05,2.0081e-05,2.2475e-05,2.013e-05,2.2435e-05,2.0298e-05,2.5217e-05,2.315e-05,1.8742e-05,2.7528e-05,1.8322e-05,2.1517e-05,2.0498e-05,2.3486e-05,2.5922e-05,2.2618e-05,1.7333e-05,2.0942e-05,2.1016e-05,1.9498e-05,2.9694e-05,2.212e-05,1.8797e-05,2.0775e-05,1.8245e-05,2.0708e-05,1.7853e-05,1.7888e-05,2.1011e-05,2.5952e-05,1.6913e-05,2.1309e-05,1.6558e-05,1.7017e-05,2.653e-05



sim executiontime 168.836
main time tick: 168.899


  int executeIteration = 1;
  int workLoad = 80;
  // steady
  int bound1 = (totalStep / 3) - 5;
  // increase
  int bound2 = (3 * totalStep / 6) - 5;
  // steady
  int bound3 = (3 * totalStep / 6) + 5;
  // decrease
  int bound4 = (4 * totalStep / 6) + 5;

  if (step < (bound1)) {
    // first part
    executeIteration = 1;
  } else if (step >= bound1 && step < bound2) {
    workLoad = 120 - 40 * (1.0 / (1.0 + 1.0 * (step - bound1)));
    executeIteration = 1 + 10 - 10 * (1.0 / (1.0 + (step - bound1)));
  } else if (step >= bound2 && step <= bound3) {
    workLoad = 120;
    executeIteration = 11;
  } else if (step > bound3 && step <= bound4) {
    workLoad = 120 - 40 * (1.0 / (1.0 + (bound4 - step)));
    executeIteration = 1 + 10 - 10 * (1.0 / (1.0 + 1.0 * (bound4 - step)));
  } else {
    // last part is low
    workLoad = 80;
    executeIteration = 1;
  }