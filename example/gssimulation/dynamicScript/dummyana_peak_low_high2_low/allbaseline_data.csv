
Al,0,0.0403586,0.0430137,0.041534,0.0400383,0.040547,0.0407646,0.0428557,0.0430052,0.0430031,0.0408731,0.0429765,0.0429023,0.0429849,0.0430073,0.0420663,0.0412935,0.0395763,0.0430129,0.506309,0.698512,0.900578,1.05896,1.09527,1.11833,1.1489,1.14658,1.31122,1.60301,1.60814,1.59462,1.5958,1.60682,1.61387,1.31765,1.15131,1.15707,1.12399,1.09032,1.06287,0.89228,0.700054,0.501952,0.0426319,0.0414643,0.0415609,0.0429443,0.0384546,0.0408165,0.0429744,0.0430144,0.0422021,0.0419787,0.0413017,0.0426469,0.042641,0.0429888,0.0395908,0.042128,0.0430109
At,0.0421236,0.042963,0.0421529,0.042217,0.042264,0.0423133,0.0424259,0.0421686,0.0421929,0.0421519,0.0421426,0.0421596,0.0430253,0.0421715,0.0420439,0.0428617,0.0422547,0.0420868,0.492007,0.683027,0.872769,1.05143,1.06362,1.0923,1.12136,1.12695,1.27851,1.55707,1.55716,1.57752,1.56118,1.55696,1.55679,1.2792,1.12133,1.12124,1.09216,1.064,1.03796,0.872135,0.683172,0.491616,0.0422149,0.0421462,0.0429885,0.0421855,0.0422187,0.0422981,0.0421875,0.0422895,0.0433178,0.0421386,0.0422721,0.04215,0.0422554,0.042181,0.0423059,0.0421455,0.0421302,0.0422411
S,1.79022,1.78881,1.78852,1.78719,1.7896,1.7894,1.80441,1.78641,1.78848,1.78817,1.78801,1.78909,1.78859,1.78872,1.8022,1.78935,1.79152,1.78811,1.79665,1.78771,1.78935,1.78862,1.78704,1.78864,1.78826,1.7879,1.78871,1.79293,1.78768,1.78801,1.7866,1.7883,1.7887,1.78984,1.78666,1.78826,1.78965,1.78705,1.78912,1.79054,1.77719,1.77801,1.77671,1.77772,1.77686,1.77641,1.77725,1.77854,1.77757,1.77703,1.77712,1.77642,1.77632,1.77599,1.77675,1.77658,1.7766,1.77881,1.77633,1.79095
T,0.282352,0.391623,0.395917,0.175067,0.36031,0.371677,0.247107,0.336629,0.190716,0.359021,0.376643,0.389699,0.341937,0.357563,0.361162,0.343684,0.353535,0.342492,0.371357,0.35752,0.423594,0.39073,0.372985,0.374854,0.354608,0.431395,0.357379,0.407002,0.355007,0.40328,0.407341,0.395025,0.391604,0.225064,0.357392,0.37375,0.401211,0.351992,0.419157,0.392548,0.396122,0.391039,0.231909,0.391435,0.328146,0.406335,0.41443,0.446807,0.407538,0.223344,0.43822,0.175321,0.357832,0.394066,0.361106,0.358131,0.409401,0.391543,0.409654,0.360171
W,0,1.8278e-05,2.4499e-05,1.7504e-05,2.1642e-05,1.4921e-05,1.6908e-05,2.5868e-05,1.8949e-05,2.0115e-05,1.4021e-05,1.8975e-05,2.093e-05,1.7918e-05,1.8202e-05,2.3454e-05,1.9942e-05,1.6365e-05,1.8091e-05,2.1667e-05,2.0373e-05,2.4737e-05,2.0414e-05,1.7948e-05,1.6663e-05,1.8232e-05,1.9838e-05,2.9273e-05,2.1104e-05,2.3727e-05,1.6832e-05,1.9183e-05,1.8102e-05,2.5758e-05,1.5547e-05,1.7243e-05,1.8317e-05,1.9309e-05,2.006e-05,1.6638e-05,1.5625e-05,2.8013e-05,1.899e-05,1.9686e-05,1.4578e-05,1.9762e-05,2.039e-05,1.5752e-05,2.0363e-05,1.812e-05,2.2695e-05,2.4091e-05,2.2078e-05,1.674e-05,2.1699e-05,2.1607e-05,2.0348e-05,3.3915e-05,1.7885e-05,2.0377e-05


sim executiontime 162.307



### the dummy ana 
  int executeIteration = 1;
  int workLoad = 80;
  // steady
  int bound1 = (totalStep / 3) - 5;
  // increase
  int bound2 = (3 * totalStep / 6) - 5;
  // steady
  int bound3 = (3 * totalStep / 6) + 5;
  // decrease
  int bound4 = (4 * totalStep / 6) + 5;

  if (step < (bound1)) {
    // first part
    executeIteration = 1;
  } else if (step >= bound1 && step < bound2) {
    workLoad = 120 - 40 * (1.0 / (1.0 + 1.0 * (step - bound1)));
    executeIteration = 1 + 10 - 10 * (1.0 / (1.0 + (step - bound1)));
  } else if (step >= bound2 && step <= bound3) {
    workLoad = 120;
    executeIteration = 11;
  } else if (step > bound3 && step <= bound4) {
    workLoad = 120 - 40 * (1.0 / (1.0 + (bound4 - step)));
    executeIteration = 1 + 10 - 10 * (1.0 / (1.0 + 1.0 * (bound4 - step)));
  } else {
    // last part is low
    workLoad = 80;
    executeIteration = 1;
  }